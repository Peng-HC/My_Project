#include "stdlib.h"
///LBFS的16个31bits寄存器单元，32bit中最高位无效
unsigned int LFSR_S0;
unsigned int LFSR_S1;
unsigned int LFSR_S2;
unsigned int LFSR_S3;
unsigned int LFSR_S4;
unsigned int LFSR_S5;
unsigned int LFSR_S6;
unsigned int LFSR_S7;
unsigned int LFSR_S8;
unsigned int LFSR_S9;
unsigned int LFSR_S10;
unsigned int LFSR_S11;
unsigned int LFSR_S12;
unsigned int LFSR_S13;
unsigned int LFSR_S14;
unsigned int LFSR_S15;

///有限状态自动机FSM层存储单元R1、R2
unsigned int F_R1;
unsigned int F_R2;

///比特重组层
unsigned int BRC_X0;
unsigned int BRC_X1;
unsigned int BRC_X2;
unsigned int BRC_X3;

///S盒
unsigned char S0[256] = {
	0x3e,0x72,0x5b,0x47,0xca,0xe0,0x00,0x33,0x04,0xd1,0x54,0x98,0x09,0xb9,0x6d,0xcb,
	0x7b,0x1b,0xf9,0x32,0xaf,0x9d,0x6a,0xa5,0xb8,0x2d,0xfc,0x1d,0x08,0x53,0x03,0x90,
	0x4d,0x4e,0x84,0x99,0xe4,0xce,0xd9,0x91,0xdd,0xb6,0x85,0x48,0x8b,0x29,0x6e,0xac,
	0xcd,0xc1,0xf8,0x1e,0x73,0x43,0x69,0xc6,0xb5,0xbd,0xfd,0x39,0x63,0x20,0xd4,0x38,
	0x76,0x7d,0xb2,0xa7,0xcf,0xed,0x57,0xc5,0xf3,0x2c,0xbb,0x14,0x21,0x06,0x55,0x9b,
	0xe3,0xef,0x5e,0x31,0x4f,0x7f,0x5a,0xa4,0x0d,0x82,0x51,0x49,0x5f,0xba,0x58,0x1c,
	0x4a,0x16,0xd5,0x17,0xa8,0x92,0x24,0x1f,0x8c,0xff,0xd8,0xae,0x2e,0x01,0xd3,0xad,
	0x3b,0x4b,0xda,0x46,0xeb,0xc9,0xde,0x9a,0x8f,0x87,0xd7,0x3a,0x80,0x6f,0x2f,0xc8,
	0xb1,0xb4,0x37,0xf7,0x0a,0x22,0x13,0x28,0x7c,0xcc,0x3c,0x89,0xc7,0xc3,0x96,0x56,
	0x07,0xbf,0x7e,0xf0,0x0b,0x2b,0x97,0x52,0x35,0x41,0x79,0x61,0xa6,0x4c,0x10,0xfe,
	0xbc,0x26,0x95,0x88,0x8a,0xb0,0xa3,0xfb,0xc0,0x18,0x94,0xf2,0xe1,0xe5,0xe9,0x5d,
	0xd0,0xdc,0x11,0x66,0x64,0x5c,0xec,0x59,0x42,0x75,0x12,0xf5,0x74,0x9c,0xaa,0x23,
	0x0e,0x86,0xab,0xbe,0x2a,0x02,0xe7,0x67,0xe6,0x44,0xa2,0x6c,0xc2,0x93,0x9f,0xf1,
	0xf6,0xfa,0x36,0xd2,0x50,0x68,0x9e,0x62,0x71,0x15,0x3d,0xd6,0x40,0xc4,0xe2,0x0f,
	0x8e,0x83,0x77,0x6b,0x25,0x05,0x3f,0x0c,0x30,0xea,0x70,0xb7,0xa1,0xe8,0xa9,0x65,
	0x8d,0x27,0x1a,0xdb,0x81,0xb3,0xa0,0xf4,0x45,0x7a,0x19,0xdf,0xee,0x78,0x34,0x60
};

unsigned char S1[256] = {
	0x55,0xc2,0x63,0x71,0x3b,0xc8,0x47,0x86,0x9f,0x3c,0xda,0x5b,0x29,0xaa,0xfd,0x77,
	0x8c,0xc5,0x94,0x0c,0xa6,0x1a,0x13,0x00,0xe3,0xa8,0x16,0x72,0x40,0xf9,0xf8,0x42,
	0x44,0x26,0x68,0x96,0x81,0xd9,0x45,0x3e,0x10,0x76,0xc6,0xa7,0x8b,0x39,0x43,0xe1,
	0x3a,0xb5,0x56,0x2a,0xc0,0x6d,0xb3,0x05,0x22,0x66,0xbf,0xdc,0x0b,0xfa,0x62,0x48,
	0xdd,0x20,0x11,0x06,0x36,0xc9,0xc1,0xcf,0xf6,0x27,0x52,0xbb,0x69,0xf5,0xd4,0x87,
	0x7f,0x84,0x4c,0xd2,0x9c,0x57,0xa4,0xbc,0x4f,0x9a,0xdf,0xfe,0xd6,0x8d,0x7a,0xeb,
	0x2b,0x53,0xd8,0x5c,0xa1,0x14,0x17,0xfb,0x23,0xd5,0x7d,0x30,0x67,0x73,0x08,0x09,
	0xee,0xb7,0x70,0x3f,0x61,0xb2,0x19,0x8e,0x4e,0xe5,0x4b,0x93,0x8f,0x5d,0xdb,0xa9,
	0xad,0xf1,0xae,0x2e,0xcb,0x0d,0xfc,0xf4,0x2d,0x46,0x6e,0x1d,0x97,0xe8,0xd1,0xe9,
	0x4d,0x37,0xa5,0x75,0x5e,0x83,0x9e,0xab,0x82,0x9d,0xb9,0x1c,0xe0,0xcd,0x49,0x89,
	0x01,0xb6,0xbd,0x58,0x24,0xa2,0x5f,0x38,0x78,0x99,0x15,0x90,0x50,0xb8,0x95,0xe4,
	0xd0,0x91,0xc7,0xce,0xed,0x0f,0xb4,0x6f,0xa0,0xcc,0xf0,0x02,0x4a,0x79,0xc3,0xde,
	0xa3,0xef,0xea,0x51,0xe6,0x6b,0x18,0xec,0x1b,0x2c,0x80,0xf7,0x74,0xe7,0xff,0x21,
	0x5a,0x6a,0x54,0x1e,0x41,0x31,0x92,0x35,0xc4,0x33,0x07,0x0a,0xba,0x7e,0x0e,0x34,
	0x88,0xb1,0x98,0x7c,0xf3,0x3d,0x60,0x6c,0x7b,0xca,0xd3,0x1f,0x32,0x65,0x04,0x28,
	0x64,0xbe,0x85,0x9b,0x2f,0x59,0x8a,0xd7,0xb0,0x25,0xac,0xaf,0x12,0x03,0xe2,0xf2
};

///7bits填充常数di
unsigned char EK_d[16] = {
	0x22, 0x2f, 0x24, 0x2a,
	0x6d, 0x40, 0x40, 0x40,
	0x40, 0x40, 0x40, 0x40,
	0x40, 0x52, 0x10, 0x30
};

/*>>F:模（2^31-1）加，c = a + b mod 2^31 - 1*/
unsigned int AddM(unsigned int a, unsigned int b)
{
	unsigned int c = a + b;
	return (c & 0x7FFFFFFF) + (c >> 31);
}

/*>>f: 循环左移k位实现乘2^k，最高位置0*/
unsigned int MulByPow2(unsigned int x, unsigned int k)
{
	return (((x) << k) | ((x) >> (31 - k))) & 0x7FFFFFFF;
}

/*>>F: LFSR初始化模式*/
void LfsrInitMode(unsigned int u) //u是FSM层非线性函数输出
{
	unsigned int mul, v;
	/* v = (2^15*S15 + 2^17*S13 + 2^21*S10 + 2^20*S4 + (1+2^8*)*S0 )， 同zuc128*/
	v = LFSR_S0;
	mul = MulByPow2(LFSR_S0, 8);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S4, 20);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S10, 21);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S13, 17);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S15, 15);
	v = AddM(mul, v);

	if (v == 0)
	{
		v = 0x7FFFFFFF;
	}

	/* update the state */
	// 循环右移1位
	LFSR_S0 = LFSR_S1;
	LFSR_S1 = LFSR_S2;
	LFSR_S2 = LFSR_S3;
	LFSR_S3 = LFSR_S4;
	LFSR_S4 = LFSR_S5;
	LFSR_S5 = LFSR_S6;
	LFSR_S6 = LFSR_S7;
	LFSR_S7 = LFSR_S8;
	LFSR_S8 = LFSR_S9;
	LFSR_S9 = LFSR_S10;
	LFSR_S10 = LFSR_S11;
	LFSR_S11 = LFSR_S12;
	LFSR_S12 = LFSR_S13;
	LFSR_S13 = LFSR_S14;
	LFSR_S14 = LFSR_S15;
	LFSR_S15 = AddM(u, v); //【different】
	// u是FSM层非线性函数输出

	/* S15为0则令S15=2^31-1 */
	if (LFSR_S15 == 0)
	{
		LFSR_S15 = 0x7FFFFFFF;
	}
}

/*>>F: LFSR密钥流生成阶段*/
void LfsrWithWorkMode()
{
	unsigned int mul, v;
	/* v = (2^15*S15 + 2^17*S13 + 2^21*S10 + 2^20*S4 + (1+2^8*)*S0 )， 同初始化阶段*/
	v = LFSR_S0;
	mul = MulByPow2(LFSR_S0, 8);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S4, 20);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S10, 21);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S13, 17);
	v = AddM(mul, v);

	mul = MulByPow2(LFSR_S15, 15);
	v = AddM(mul, v);

	/* update the state */
	LFSR_S0 = LFSR_S1;
	LFSR_S1 = LFSR_S2;
	LFSR_S2 = LFSR_S3;
	LFSR_S3 = LFSR_S4;
	LFSR_S4 = LFSR_S5;
	LFSR_S5 = LFSR_S6;
	LFSR_S6 = LFSR_S7;
	LFSR_S7 = LFSR_S8;
	LFSR_S8 = LFSR_S9;
	LFSR_S9 = LFSR_S10;
	LFSR_S10 = LFSR_S11;
	LFSR_S11 = LFSR_S12;
	LFSR_S12 = LFSR_S13;
	LFSR_S13 = LFSR_S14;
	LFSR_S14 = LFSR_S15;
	LFSR_S15 = v;

	/* S15为0则令S15=2^31-1 */
	if (LFSR_S15 == 0)	//【different】
	{
		LFSR_S15 = 0x7FFFFFFF;
	}
}
/*>>F: BR层bit重组， 同zuc128*/
void BitReorganization()
{
	// 0x7FFF8000->0111 1111 1111 1111 1000 0000 0000 0000	16个1,保留LFSR_S15的高16位(舍弃S15最高位),即15位
	// 0xFFFF->0000 0000 0000 0000 1111 1111 1111 1111 16个1,保留LFSR_S14的低16位
	BRC_X0 = ((LFSR_S15 & 0x7FFF8000) << 1) | (LFSR_S14 & 0xFFFF); // S15_H||S14_L， 舍弃S15最高位
	BRC_X1 = (LFSR_S11 << 16) | (LFSR_S9 >> 15); //S11_L||S9_H， 舍弃S9最高位
	BRC_X2 = (LFSR_S7 << 16) | (LFSR_S5 >> 15);  //S7_L||S5_H
	BRC_X3 = (LFSR_S2 << 16) | (LFSR_S0 >> 15);  //S2_L||S0_H*/
}

/*>>f: 循环左移k位*/
unsigned int Rot(unsigned int x, unsigned int k)
{
	return ((x) << k) | ((x) >> (32 - k));
}
/*>>f: L1， 同zuc128 */
unsigned int L1(unsigned int X)
{
	return (X ^ Rot(X, 2) ^ Rot(X, 10) ^ Rot(X, 18) ^ Rot(X, 24));
}

/*>>f: L2， 同zuc128 */
unsigned int L2(unsigned int X)
{
	return (X ^ Rot(X, 8) ^ Rot(X, 14) ^ Rot(X, 22) ^ Rot(X, 30));
}

/*>>f: s盒变换 */
unsigned int Sbox(unsigned int r)
{
	unsigned int a, b, c, d;
	a = S0[r >> 24];
	b = S1[(r >> 16) & 0xFF];
	c = S0[(r >> 8) & 0xFF];
	d = S1[r & 0xFF];
	return (a << 24) | (b << 16) | (c << 8) | d;
}

/*>>F: FSM层非线性函数F, */
unsigned int F()
{
	unsigned int W, W1, W2, r1, r2;
	W = (BRC_X0 ^ F_R1) + F_R2;
	W1 = F_R1 + BRC_X1;
	W2 = F_R2 ^ BRC_X2;
	r1 = L1((W1 << 16) | (W2 >> 16));//(w1||w2)<<<16
	r2 = L2((W2 << 16) | (W1 >> 16));
	F_R1 = Sbox(r1);
	F_R2 = Sbox(r2);
	return W;
}

/*>>f: 将4个8bit拼接为31bit,b舍弃最高位， a||b||c||d */
unsigned int Connect(unsigned char a, unsigned char b, unsigned char c, unsigned char d)
{
	unsigned int res = 0x00000000;
	res = (res | a) << 7;
	res = (res | b) << 8;
	res = (res | c) << 8;
	res = res | d;
	return res;
}

/*>>F: 初始化阶段*/
void Initialization(unsigned char* init_k, unsigned char* init_iv)
{
	unsigned int i = 0, u = 0;
	//密钥、初始向量装载
	LFSR_S0 = Connect(init_k[0], EK_d[0], init_k[21], init_k[16]);
	LFSR_S1 = Connect(init_k[1], EK_d[1], init_k[22], init_k[17]);
	LFSR_S2 = Connect(init_k[2], EK_d[2], init_k[23], init_k[18]);
	LFSR_S3 = Connect(init_k[3], EK_d[3], init_k[24], init_k[19]);
	LFSR_S4 = Connect(init_k[4], EK_d[4], init_k[25], init_k[20]);
	LFSR_S5 = Connect(init_iv[0], EK_d[5] | init_iv[17], init_k[5], init_k[26]);
	LFSR_S6 = Connect(init_iv[1], EK_d[6] | init_iv[18], init_k[6], init_k[27]);
	LFSR_S7 = Connect(init_iv[10], EK_d[7] | init_iv[19], init_k[7], init_iv[2]);
	LFSR_S8 = Connect(init_k[8], EK_d[8] | init_iv[20], init_iv[3], init_iv[11]);
	LFSR_S9 = Connect(init_k[9], EK_d[9] | init_iv[21], init_iv[12], init_iv[4]);
	LFSR_S10 = Connect(init_iv[5], EK_d[10] | init_iv[22], init_k[10], init_k[28]);
	LFSR_S11 = Connect(init_k[11], EK_d[11] | init_iv[23], init_iv[6], init_iv[13]);
	LFSR_S12 = Connect(init_k[12], EK_d[12] | init_iv[24], init_iv[7], init_k[14]);
	LFSR_S13 = Connect(init_k[13], EK_d[13], init_iv[15], init_iv[8]);
	LFSR_S14 = Connect(init_k[14], EK_d[14] | (init_k[31] >> 4), init_iv[16], init_iv[9]);
	LFSR_S15 = Connect(init_k[15], EK_d[15] | (init_k[31] & 0x0f), init_k[30], init_k[29]);

	F_R1 = F_R2 = 0;
	//初始化阶段，共32+1轮

	for (i = 0; i < 32; ++i) {
		BitReorganization();
		u = F();
		LfsrInitMode(u >> 1);
	}
	BitReorganization();
	F(); 			// discard the output of F
	LfsrWithWorkMode();
}

/*>>F: ZUC密钥流生成
	pKeystream：密钥流存放数组
	KeystreamLen：生成密钥流字长度，即输出 KeystreamLen*32bit 长度流密钥
<<*/
void GenerateKeystream(unsigned int* pKeystream, int KeystreamLen)
{
	int i;
	for (i = 0; i < KeystreamLen; ++i)
	{
		BitReorganization();
		pKeystream[i] = F() ^ BRC_X3;
		LfsrWithWorkMode();
	}
}