//
// Created by ruiy on 18-6-26.
//

#include <Util/Math/GrayCode/GrayCode.h>
#include <Util/Math/Crc/Crc.h>
#include <Util/Math/Convert/Convert.h>
#include <QtGui/QtGui>
#include "Key.h"
/**
 * calc_uncheck_key和calc_uncheck_key2是两种信息调和的方式,不矛盾,此系统中分别验证和实现它们
 */
//信息调和:第一种:交互式信息调和(CRC校验):计算未检验秘钥 --> 用于图片加密
void Key::calc_uncheck_key() {
    // 计算绝对值
//    std::vector<float> abs_csi_temp;
//    std::vector<std::complex<float>>::const_iterator first1=csi.end()-(1152-30);
//    std::vector<std::complex<float>>::const_iterator last1=csi.end();
//    std::vector<std::complex<float>> csi_temp(first1,last1);
//    for (const std::complex<float> &c: csi_temp) abs_csi_temp.push_back(std::abs(c));
//    // 511
//abs_csi.erase(abs_csi.begin()+255);
    std::vector<float> abs_csi_temp(csi_abs.begin(),csi_abs.end());
    std::cout<<"abs_csi_temp.size="<<abs_csi_temp.size()<<"\n"<<endl;
    abs_csi_temp.erase(abs_csi_temp.begin() + 550,abs_csi_temp.begin()+580);
    std::vector<float> abs_csi;
    for (int i=0;i<abs_csi_temp.size();){
        abs_csi.push_back(abs_csi_temp[i]);
        i+=2;
        if(abs_csi.size()==511){
            break;
        }
    }

    float max_abs_csi = find_max(abs_csi);

    int len = abs_csi.size();

    int norm_scale = 127;
    int L = 7;
    int delta = 4;

    float average = avg(abs_csi);

    // 归一化
    std::vector<float> norm_abs_csi;
    for (const auto& elem: abs_csi) {
        float t = norm_scale * elem / max_abs_csi;
        norm_abs_csi.push_back(std::round(t));
    }


    // 量化(截尾)
    std::vector<int> truncation_abs_csi;
    for (const auto& elem: norm_abs_csi) {
        truncation_abs_csi.push_back(std::floor(elem / std::pow(2, delta)));
    }

    //格雷编码
    std::string all_gray_code;
    GrayCode grayCode;
    for (const auto& elem: truncation_abs_csi) {
        all_gray_code += grayCode.dec2gray_str(elem, L-delta);
    }

    //7位一组
    std::vector<std::string> block_csi;
    for (int i=0;i<all_gray_code.size()-L;i+=L) {
        block_csi.push_back(all_gray_code.substr(i, L));
    }

    Crc crc;
    crc_redundances.clear();//冗余码
    crc_origins.clear();
    for (const auto& block: block_csi) {
        crc.calc(block, "1100000001111");//对每一组比特流计算冗余码
        crc_redundances.push_back(crc.get_redundance());//冗余码集合
        crc_origins.push_back(crc.get_origin());//这个其实就是block
    }
}
//信息调和:第二种:前向式信息调和(Polar信道编码):计算未检验秘钥(删除边界点->均匀量化->交织) --> 用于信息加密
void Key::calc_uncheck_key2() {
    // 计算绝对值
//    std::vector<float> abs_csi_temp;
//    std::vector<std::complex<float>>::const_iterator first1=csi.end()-(1152-30);
//    std::vector<std::complex<float>>::const_iterator last1=csi.end();
//    std::vector<std::complex<float>> csi_temp(first1,last1);
//    for (const std::complex<float> &c: csi_temp) abs_csi_temp.push_back(std::abs(c));
    // 511
//abs_csi.erase(abs_csi.begin()+255);
    //去除直流分量
    std::vector<float> abs_csi_temp(csi_abs.begin(),csi_abs.end());
    abs_csi_temp.erase(abs_csi_temp.begin() + 550,abs_csi_temp.begin()+580);
    std::vector<float> abs_csi;
    for (int i=0;i<abs_csi_temp.size();){
        abs_csi.push_back(abs_csi_temp[i]);
        i+=2;
        if(abs_csi.size()==511){
            break;
        }
    }

//    std::string fe = "0.151815351994420\t0.158202071107481\t0.164845702025676\t0.171732674258429\t0.178848887005306\t0.186179757633183\t0.193710113364173\t0.201424423176342\t0.209306573231209\t0.217340093344824\t0.225507987868627\t0.233792934810225\t0.242177079071682\t0.250642336481639\t0.259170253648733\t0.267742132969887\t0.276339147179266\t0.284942421838565\t0.293533030181039\t0.302092269426936\t0.310601658354115\t0.319043168021439\t0.327399273724147\t0.335653178991010\t0.343788839416018\t0.351791199111598\t0.359646248067484\t0.367341081518325\t0.374864077493639\t0.382204886828477\t0.389354484249907\t0.396305134443887\t0.403050547736466\t0.409585640934075\t0.415906610911254\t0.422010858148908\t0.427896747317092\t0.433563791338262\t0.439012129690744\t0.444242908883346\t0.449257680546711\t0.454058639296437\t0.458648220670431\t0.463029421833649\t0.467205138963041\t0.471178765961598\t0.474953555945452\t0.478533011450531\t0.481920763759140\t0.485120506782871\t0.488135990145746\t0.490971313872783\t0.493630786893810\t0.496119018837507\t0.498440799792747\t0.500601605681480\t0.502607252069514\t0.504463883421285\t0.506178274072814\t0.507757501854242\t0.509209277440973\t0.510541553262127\t0.511762763939466\t0.512881375372031\t0.513906184201629\t0.514845856039795\t0.515708959225178\t0.516503866438195\t0.517238513572935\t0.517920432340354\t0.518556463575568\t0.519152777066733\t0.519714565420603\t0.520246397679934\t0.520751743422357\t0.521233333433413\t0.521692921786464\t0.522131322343495\t0.522548914435617\t0.522945070450140\t0.523318790588289\t0.523668700286597\t0.523993129079899\t0.524290372954382\t0.524558690317144\t0.524796642628915\t0.525002931249808\t0.525176893854019\t0.525318379014971\t0.525427677634006\t0.525505684937280\t0.525554139560741\t0.525575134387071\t0.525571337134186\t0.525545875776836\t0.525502275807451\t0.525444087551306\t0.525375149602399\t0.525298987906624\t0.525219103778537\t0.525138594879436\t0.525059933156620\t0.524985130832738\t0.524915455217569\t0.524851633230221\t0.524793328406621\t0.524739626090769\t0.524688871974534\t0.524638649431053\t0.524586208614296\t0.524528010710743\t0.524460563372083\t0.524379915581687\t0.524282269675926\t0.524163852270222\t0.524021392000378\t0.523851600169740\t0.523652171226428\t0.523421278320604\t0.523157738192039\t0.522861278222410\t0.522532370775513\t0.522172153345711\t0.521782482275994\t0.521365847197901\t0.520925509489958\t0.520464770277762\t0.519987495044483\t0.519497432731264\t0.518998402607146\t0.518494112697982\t0.517987773153779\t0.517482231664684\t0.516979618571636\t0.516481481510334\t0.515988741544340\t0.515501190282441\t0.515018376770070\t0.514538663021233\t0.514060166577414\t0.513580105278139\t0.513095490437394\t0.512602974903979\t0.512098994689505\t0.511580302755536\t0.511043353405331\t0.510485161456297\t0.509903397731031\t0.509296017742589\t0.508661724801643\t0.507999930658304\t0.507310989912661\t0.506595706095890\t0.505856000879112\t0.505094218034293\t0.504313319876987\t0.503516766406701\t0.502708498489048\t0.501892608587973\t0.501073157571858\t0.500254068264051\t0.499439243410637\t0.498631853712739\t0.497834628455045\t0.497049823523648\t0.496278575757949\t0.495521636399372\t0.494778694597952\t0.494048686790736\t0.493329688147454\t0.492619253973664\t0.491914244872995\t0.491211060862183\t0.490505712430432\t0.489794210298325\t0.489072455756122\t0.488336504020813\t0.487582763285267\t0.486808209089311\t0.486010151302827\t0.485186836183391\t0.484337163967272\t0.483461003335962\t0.482558937399378\t0.481632380966246\t0.480683753925577\t0.479715997798856\t0.478732829903871\t0.477738250497868\t0.476736930463240\t0.475733550410045\t0.474732982643356\t0.473739914041370\t0.472758765694848\t0.471793473317493\t0.470847546930511\t0.469923676442646\t0.469024036619116\t0.468149621941611\t0.467300883898588\t0.466477247358588\t0.465677362002367\t0.464899129475862\t0.464139750071447\t0.463395837229905\t0.462663608804560\t0.461938994233352\t0.461217779738913\t0.460495817460628\t0.459769126785009\t0.459033958604312\t0.458287061786503\t0.457525904028888\t0.456748520882363\t0.455953572081077\t0.455140632468676\t0.454310000821547\t0.453462836965974\t0.452600897354575\t0.451726634640600\t0.450843104269337\t0.449953808775826\t0.449062411300564\t0.448172930058255\t0.447289468893734\t0.446415848409598\t0.445555636247539\t0.444712000199128\t0.443887756991142\t0.443084883048349\t0.442304781550868\t0.441548099512026\t0.440814633429675\t0.440103445040844\t0.439412825660116\t0.438740440861715\t0.438083346324840\t0.437437943927723\t0.436800474997902\t0.436166773949428\t0.435532655792757\t0.434893935629175\t0.434246560956002\t0.433586945029576\t0.432911760666528\t0.432218478158777\t0.431504911430251\t0.430769764809228\t0.430012445764244\t0.429233106800636\t0.428432487109158\t0.427612219539994\t0.426774395801236\t0.425921717254764\t0.425057263499730\t0.424184522824411\t0.423307009815312\t0.422428275851394\t0.421551771139786\t0.420680864056171\t0.419818300328940\t0.418966498444552\t0.418127314926892\t0.417301979228059\t0.416491061563600\t0.415694332567822\t0.414911017677673\t0.414139665435513\t0.413378156862963\t0.412623979367565\t0.411874177209035\t0.411125520744859\t0.410374506159593\t0.409617949974767\t0.408852386914101\t0.408074745571689\t0.407282241153197\t0.406472717666073\t0.405644283654717\t0.404795825414275\t0.403926785705576\t0.403037277530557\t0.402127993099674\t0.401200258667350\t0.400255832805540\t0.399297024767810\t0.398326514093297\t0.397346994028596\t0.396361468795546\t0.395372830720783\t0.394383804582854\t0.393396916237091\t0.392414151070376\t0.391437132377190\t0.390466937545031\t0.389504050431398\t0.388548300494208\t0.387598877509352\t0.386654433721770\t0.385713070702466\t0.384772390427730\t0.383829649121114\t0.382881879522265\t0.381926040100386\t0.380958919407380\t0.379977576526814\t0.378979197822357\t0.377961479011571\t0.376922331756208\t0.375860381230806\t0.374774825946677\t0.373665492367207\t0.372532685663298\t0.371377544374140\t0.370201522769563\t0.369006791884420\t0.367795783564367\t0.366571336754950\t0.365336453483668\t0.364094202798532\t0.362847542245814\t0.361599415507217\t0.360352127173174\t0.359107884785040\t0.357868211898350\t0.356634251558899\t0.355406242329660\t0.354184006276934\t0.352966768386656\t0.351752993126529\t0.350540751662810\t0.349327663574584\t0.348110870922727\t0.346887458069435\t0.345654251608498\t0.344408245755512\t0.343146551617778\t0.341866446064070\t0.340565690165103\t0.339242480500769\t0.337895494323970\t0.336524162264944\t0.335128312356105\t0.333708553920538\t0.332266133169056\t0.330802652373798\t0.329320319564232\t0.327821676214854\t0.326309491501758\t0.324786911013033\t0.323256808055772\t0.321722363613766\t0.320186215906072\t0.318650978762090\t0.317118620995987\t0.315590888149571\t0.314068849812294\t0.312553131675919\t0.311043680974033\t0.309540038629569\t0.308041254378134\t0.306545741826189\t0.305051790912326\t0.303557381809209\t0.302060189252081\t0.300558041945746\t0.299048722397937\t0.297530175888372\t0.296000682567538\t0.294458765608139\t0.292903402656631\t0.291334171462705\t0.289750834002976\t0.288153813747726\t0.286544111421068\t0.284922943209741\t0.283291992815766\t0.281653264042172\t0.280008936288711\t0.278361231613636\t0.276712520202445\t0.275065002202101\t0.273420719806489\t0.271781463887063\t0.270148548805224\t0.268523083621312\t0.266905543379881\t0.265296080097192\t0.263694343067524\t0.262099531186700\t0.260510421576965\t0.258925570655982\t0.257343107335544\t0.255761216456663\t0.254177783457547\t0.252590947297192\t0.250998713001882\t0.249399490833465\t0.247791949467823\t0.246175007261168\t0.244548078980471\t0.242911073516708\t0.241264107039616\t0.239608063891035\t0.237944007003704\t0.236273422705195\t0.234598177511635\t0.232920234508867\t0.231241884858491\t0.229565365616839\t0.227892939009432\t0.226226725011439\t0.224568661606922\t0.222920498782591\t0.221283536228030\t0.219658809460484\t0.218046889587738\t0.216447990385356\t0.214861824917117\t0.213287789499848\t0.211724857917036\t0.210171763330353\t0.208626924417541\t0.207088588459658\t0.205554906498849\t0.204023892597099\t0.202493641723658\t0.200962338353094\t0.199428213145902\t0.197889740472286\t0.196345508861175\t0.194794422410537\t0.193235587431111\t0.191668309567801\t0.190092046061263\t0.188506488555855\t0.186911414768589\t0.185306706259400\t0.183692272707693\t0.182068037977546\t0.180433733921055\t0.178789187124008\t0.177133933472205\t0.175467421561130\t0.173788818067381\t0.172097250713346\t0.170391517937737\t0.168670355038930\t0.166932323913520\t0.165175915342114\t0.163399543952944\t0.161601696365185\t0.159780837381571\t0.157935663944967\t0.156064958662077\t0.154167782779823\t0.152243468122764\t0.150291736595573\t0.148312544312365\t0.146306321139998\t0.144273848319923\t0.142216339015630\t0.140135370307947\t0.138032955117189\t0.135911521858383\t0.133773738401204\t0.131622726720380\t0.129461929543151\t0.127295075892878\t0.125126224179486\t0.122959724988184\t0.120800228009760\t0.118652706031072\t0.116522461422136\t0.114415097884994\t0.112336642214541\t0.110293486466126\t0.108292517772406\t0.106341109302436\t0.104447178605063\t0.102619242009548\t0.100866529015012\t0.0991989053809812\t0.0976269690968286\t0.0961621583601003\t0.0948166974992178\t0.0936036242898112\t0.0925367956614939\t0.0916308448150404\t0.0909010545144760\t0.0903633659131302\t0.0900341149208291\t0.0899298580778943\t0.0900671843756289\t0.0904623517928190\t0.0911310595858419\t0.0920880231876821\t0.0933467613661201\t0.0949191438644624\t0.0968153055070006\t0.0990433162593854\t0.101609160850174\t0.104516596064899\t0.107767249886771\t0.111360620911081\t0.115294281021653\t0.114687917999564\t0.118714734696845\t0.123084052417824\t0.127790201782723\t0.132826048030955\t";
//    const char* gs = fe.c_str();
//    std::vector<std::string> gs1 = separated(gs);
//    std::vector<float> abs_csi;
//    int cnt = 0;
//    for (const std::string &ds : gs1){
//        abs_csi.push_back(atof(ds.c_str()));
//        std::cout << "abs_csi----=" << abs_csi.at(cnt) << std::endl;
//        cnt++;
//    }


    //删除边界点
    int deleteNum = 50;
    std::vector<float> abs_csi2= {abs_csi.begin()+deleteNum,abs_csi.end()-deleteNum};

    float max_abs_csi = find_max(abs_csi2);

    int len = abs_csi2.size();

    int norm_scale = 127;
    int L = 7;
    int delta = 4;

    float average = avg(abs_csi2);

    // 归一化
    std::vector<float> norm_abs_csi;
    for (const auto& elem: abs_csi2) {
        float t = norm_scale * elem / max_abs_csi;
        norm_abs_csi.push_back(std::round(t));
    }

    // 量化(截尾)
    std::vector<int> truncation_abs_csi;
    for (const auto& elem: norm_abs_csi) {
        truncation_abs_csi.push_back(std::floor(elem / std::pow(2, delta)));
    }

    //格雷编码
    std::string all_gray_code;
    GrayCode grayCode;
    for (const auto& elem: truncation_abs_csi) {
        all_gray_code += grayCode.dec2gray_str(elem, L-delta);
    }
    //交织并取前1024个点
    mixed(all_gray_code);
}

std::vector<std::string> Key::separated(const char* in){
    const char* delim = "\t";//分隔符(换行符)
    char* in2 = const_cast<char*>(in);//转换类型，const char* -> char*
    std::vector<std::string> res;
    char* s = strtok(in2,delim);
    while (s != NULL){//按照分隔符将
        res.push_back(s);
        s = strtok(NULL,delim);
    }
    return res;
}


void Key::mixed(std::string code){
    std::string sorting_Index = "561\t1003\t564\t1116\t823\t547\t891\t1197\t40\t945\t800\t1158\t693\t549\t1194\t438\t447\t718\t17\t473\t1118\t20\t703\t893\t928\t1207\t317\t1095\t726\t491\t1104\t195\t571\t977\t368\t560\t138\t543\t65\t98\t903\t367\t989\t129\t139\t511\t531\t752\t102\t685\t184\t944\t586\t1042\t1202\t728\t132\t623\t279\t681\t826\t344\t105\t357\t440\t458\t774\t1061\t1205\t1199\t917\t346\t282\t1165\t957\t998\t1058\t477\t538\t236\t468\t779\t320\t39\t1098\t128\t762\t892\t925\t1169\t1193\t641\t277\t854\t6\t640\t133\t911\t112\t526\t954\t612\t676\t1079\t1045\t290\t268\t1206\t738\t947\t79\t767\t291\t847\t1056\t444\t303\t77\t1175\t1115\t796\t887\t916\t462\t333\t750\t852\t968\t946\t1033\t659\t1016\t905\t30\t725\t1069\t419\t1049\t264\t1050\t558\t753\t288\t1000\t1137\t356\t1114\t980\t937\t580\t789\t182\t215\t857\t67\t984\t997\t252\t943\t884\t209\t386\t941\t2\t956\t1092\t861\t452\t69\t247\t267\t751\t1227\t702\t64\t1182\t951\t11\t1080\t961\t188\t1013\t786\t824\t1041\t1183\t513\t27\t478\t94\t673\t192\t988\t872\t169\t715\t923\t902\t584\t1144\t964\t1094\t574\t953\t843\t1103\t1204\t730\t1111\t899\t130\t1151\t459\t830\t187\t296\t1184\t686\t1099\t960\t787\t672\t1028\t338\t808\t551\t173\t148\t1017\t674\t791\t537\t1188\t1130\t871\t611\t1101\t616\t888\t740\t1014\t927\t546\t517\t904\t552\t3\t1139\t660\t972\t68\t815\t572\t13\t1012\t347\t811\t190\t582\t351\t993\t280\t42\t19\t1074\t1125\t817\t319\t158\t836\t528\t399\t335\t930\t1076\t271\t874\t1018\t1179\t818\t696\t51\t844\t722\t717\t881\t588\t261\t534\t704\t234\t959\t1160\t518\t929\t949\t894\t1\t710\t81\t270\t709\t856\t1152\t535\t577\t1173\t792\t744\t833\t1112\t1037\t1180\t52\t425\t1141\t9\t1156\t565\t21\t870\t490\t719\t994\t624\t289\t106\t858\t71\t149\t504\t1063\t523\t1007\t373\t49\t775\t506\t967\t83\t1085\t635\t831\t1225\t915\t1053\t540\t778\t1108\t285\t772\t1191\t567\t695\t962\t1089\t1110\t827\t958\t481\t555\t622\t578\t176\t59\t1055\t449\t921\t976\t18\t4\t1011\t370\t16\t437\t837\t896\t716\t731\t428\t629\t72\t594\t501\t866\t374\t292\t610\t777\t838\t520\t794\t87\t1068\t466\t712\t1129\t1052\t50\t311\t34\t206\t525\t387\t785\t47\t734\t1009\t174\t832\t1149\t430\t529\t269\t443\t189\t1120\t645\t521\t522\t503\t465\t1126\t714\t204\t403\t812\t382\t867\t545\t123\t1102\t1176\t37\t140\t162\t1128\t74\t1200\t825\t298\t655\t1071\t84\t127\t965\t897\t781\t875\t378\t745\t816\t392\t409\t340\t677\t1036\t377\t679\t845\t7\t933\t240\t918\t91\t784\t541\t36\t648\t996\t516\t126\t1136\t691\t213\t362\t1123\t416\t1181\t554\t873\t737\t669\t512\t110\t609\t1024\t1008\t1020\t379\t231\t1048\t185\t424\t104\t1221\t1039\t1027\t415\t1226\t297\t618\t211\t1121\t1213\t1224\t325\t1054\t1030\t434\t720\t1203\t955\t420\t1067\t318\t1025\t445\t1209\t987\t1021\t167\t732\t999\t631\t783\t100\t822\t390\t1034\t634\t848\t663\t35\t456\t474\t1215\t161\t15\t32\t758\t144\t671\t1164\t1222\t562\t1023\t544\t486\t1093\t446\t1147\t352\t587\t654\t143\t1075\t1097\t701\t1153\t8\t799\t1105\t966\t713\t539\t1078\t1230\t181\t593\t527\t692\t299\t1059\t293\t841\t995\t418\t940\t759\t1010\t581\t1146\t895\t621\t1163\t553\t724\t1134\t952\t1159\t423\t771\t828\t61\t760\t597\t599\t876\t651\t14\t642\t1081\t688\t131\t1210\t1077\t886\t636\t889\t145\t585\t43\t1187\t1035\t433\t1100\t764\t183\t226\t142\t427\t821\t568\t908\t55\t1032\t48\t307\t1131\t981\t1228\t316\t890\t536\t281\t589\t970\t605\t1022\t244\t1135\t1113\t806\t363\t326\t1201\t653\t656\t782\t401\t283\t684\t429\t690\t754\t1072\t694\t733\t566\t255\t116\t723\t212\t913\t742\t1002\t803\t746\t575\t909\t942\t596\t33\t227\t154\t859\t31\t880\t111\t850\t1083\t103\t353\t107\t563\t591\t1127\t1223\t221\t113\t906\t364\t207\t197\t164\t727\t773\t639\t179\t118\t224\t699\t602\t802\t177\t595\t1178\t484\t926\t260\t1090\t514\t747\t86\t687\t99\t196\t601\t626\t583\t986\t769\t617\t1040\t939\t1082\t435\t1015\t559\t312\t235\t286\t625\t1157\t70\t1096\t765\t1148\t814\t147\t1212\t1166\t1167\t661\t219\t637\t907\t935\t1218\t666\t402\t1043\t495\t372\t1133\t220\t1026\t678\t606\t835\t210\t766\t855\t287\t991\t813\t1208\t460\t735\t1219\t1171\t92\t1186\t248\t1038\t851\t1029\t178\t265\t324\t1155\t982\t576\t341\t1214\t505\t97\t644\t864\t863\t1066\t632\t471\t302\t24\t633\t29\t819\t708\t366\t1006\t63\t395\t371\t919\t5\t108\t422\t393\t66\t448\t218\t646\t1211\t150\t200\t278\t89\t194\t284\t405\t628\t388\t26\t408\t153\t1005\t1124\t119\t770\t615\t135\t241\t411\t1220\t251\t389\t1145\t203\t202\t711\t1057\t755\t810\t272\t1195\t573\t489\t322\t1229\t1143\t510\t166\t756\t463\t225\t151\t146\t741\t198\t332\t186\t304\t1087\t496\t38\t1117\t1162\t936\t680\t638\t557\t901\t246\t263\t1192\t1161\t396\t983\t860\t115\t840\t1185\t412\t1091\t948\t358\t729\t749\t1189\t413\t193\t658\t969\t790\t136\t359\t1138\t262\t1119\t25\t839\t421\t698\t238\t985\t992\t253\t963\t793\t809\t155\t461\t498\t974\t670\t472\t1196\t442\t1070\t259\t457\t480\t706\t1088\t1060\t932\t343\t328\t300\t406\t274\t245\t530\t683\t208\t101\t569\t829\t788\t801\t519\t308\t662\t798\t451\t273\t675\t1046\t853\t400\t842\t834\t885\t542\t922\t882\t96\t483\t579\t159\t898\t1174\t1142\t1047\t805\t1122\t979\t417\t95\t807\t380\t849\t301\t216\t168\t598\t309\t868\t365\t237\t1168\t254\t384\t608\t414\t232\t397\t990\t431\t1190\t492\t652\t191\t1172\t441\t53\t1106\t1170\t603\t507\t10\t643\t134\t152\t556\t493\t697\t391\t973\t524\t398\t650\t323\t426\t56\t117\t180\t294\t748\t721\t665\t846\t1154\t383\t228\t58\t532\t394\t795\t482\t381\t1073\t305\t614\t488\t620\t1109\t404\t439\t23\t682\t570\t329\t78\t172\t494\t250\t743\t464\t592\t75\t1107\t763\t375\t707\t171\t1086\t761\t647\t436\t934\t345\t454\t407\t306\t258\t509\t348\t978\t175\t924\t515\t201\t73\t54\t1177\t163\t122\t500\t22\t1019\t1084\t1062\t657\t877\t205\t912\t256\t331\t156\t339\t46\t499\t360\t321\t668\t600\t295\t469\t350\t1140\t223\t938\t931\t141\t739\t217\t88\t410\t28\t80\t44\t257\t12\t214\t137\t276\t664\t310\t613\t354\t355\t90\t879\t780\t376\t607\t315\t222\t230\t93\t1064\t62\t869\t1001\t385\t1217\t508\t485\t60\t502\t1044\t336\t266\t453\t125\t1065\t900\t369\t497\t797\t239\t1004\t249\t157\t120\t548\t160\t476\t862\t199\t334\t1051\t590\t1031\t1132\t1150\t619\t920\t313\t768\t432\t914\t450\t533\t736\t910\t275\t950\t971\t804\t349\t121\t243\t627\t757\t45\t649\t314\t361\t109\t689\t76\t776\t337\t865\t705\t700\t604\t467\t550\t470\t820\t85\t165\t41\t327\t475\t878\t479\t82\t330\t342\t667\t455\t487\t1216\t1198\t124\t883\t242\t170\t114\t57\t975\t630\t229\t233\t";

    const char* gs = sorting_Index.c_str();
    std::vector<std::string> gs1 = separated(gs);
    std::vector<int> sorting_Index2;
    for (const std::string &ds : gs1){
        sorting_Index2.push_back(atoi(ds.c_str())-1);
    }
    std::string tmp;
    for(int i = 0; i < sorting_Index2.size(); i++){
        tmp += (code.at(sorting_Index2.at(i)));
    }

    std::string res = tmp.substr(0,1024);

    unchecked_key = res;
}

std::vector<std::string> Key::get_codes() {
    std::vector<std::string> codes;
    for (int i=0;i<crc_origins.size();i++) {
        codes.push_back(crc_origins[i] + crc_redundances[i]);
    }
    return codes;
}

//每一组的原始信息位(crc_origins)与每一个crc的冗余码组合后对生成多项式进行计算，为0就使用crc_marks记录正确的校验结果，并且计算right_num
//而后根据crc_marks中的1的索引进行保留crc_origins而获得keys
//服务端由此生成了校验结果crc_marks和密钥keys
float Key::check_by_redundance(std::vector<std::string> crc_redundances) {
    Convert converter;
    crc_marks.clear();
    right_num = 0;
    long generate = converter.binstr2dec("1100000001111");
    for (int i=0;i<crc_redundances.size();i++) {
        std::string need_check_code = crc_origins[i] + crc_redundances[i];
        long code_num = converter.binstr2dec(need_check_code);
        long redundance_num = converter.binstr2dec(crc_redundances[i]);
        if (mod_binary(code_num, generate) == 0) { // 若能整除, 则真
            crc_marks.push_back("1");
            right_num++;
        } else {
            crc_marks.push_back("0");
        }
    }

    keys.clear();
    for (int i=0;i<crc_marks.size();i++) if (crc_marks[i] == "1") keys.push_back(crc_origins[i]);

    float right_rate = static_cast<float>(right_num) / crc_marks.size();
    return right_rate;
}

//客户端只需要根据服务端发送过来的校验结果进行确定密钥
void Key::check_by_marks(std::vector<std::string> crc_marks_) {
    crc_marks.assign(crc_marks_.begin(), crc_marks_.end());
    keys.clear();
    for (int i=0;i<crc_marks.size();i++) if (crc_marks[i] == "1") keys.push_back(crc_origins[i]);
}